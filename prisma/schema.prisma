// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    watchlist     Watchlist[]
    preferences   UserPreference?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// StreamHub specific models
model Movie {
    id               String    @id // TMDB or IMDB ID
    title            String
    overview         String?   @db.Text
    posterPath       String?
    backdropPath     String?
    releaseDate      DateTime?
    voteAverage      Float?
    voteCount        Int?
    runtime          Int?
    genres           Genre[]   @relation("MovieGenres")
    streamingOptions StreamingOption[]
    watchlist        Watchlist[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    @@index([title])
}

model TvShow {
    id               String    @id // TMDB or IMDB ID
    title            String
    overview         String?   @db.Text
    posterPath       String?
    backdropPath     String?
    firstAirDate     DateTime?
    lastAirDate      DateTime?
    voteAverage      Float?
    voteCount        Int?
    numberOfSeasons  Int?
    numberOfEpisodes Int?
    genres           Genre[]   @relation("TvShowGenres")
    streamingOptions StreamingOption[]
    watchlist        Watchlist[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    @@index([title])
}

model Genre {
    id      String   @id
    name    String   @unique
    movies  Movie[]  @relation("MovieGenres")
    tvShows TvShow[] @relation("TvShowGenres")
}

model StreamingOption {
    id        String   @id @default(cuid())
    provider  String   // Netflix, Amazon, etc.
    region    String   // US, UK, etc.
    url       String?
    price     Float?
    type      String   // SUBSCRIPTION, RENT, BUY
    movie     Movie?   @relation(fields: [movieId], references: [id])
    movieId   String?
    tvShow    TvShow?  @relation(fields: [tvShowId], references: [id])
    tvShowId  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, region, movieId, tvShowId])
    @@index([provider, region])
}

model Watchlist {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    movie     Movie?   @relation(fields: [movieId], references: [id])
    movieId   String?
    tvShow    TvShow?  @relation(fields: [tvShowId], references: [id])
    tvShowId  String?
    addedAt   DateTime @default(now())

    @@unique([userId, movieId, tvShowId])
}

model UserPreference {
    id            String   @id @default(cuid())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @unique
    region        String   @default("us") // Default region for content availability
    preferredGenres Int[]    // Array of genre IDs
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
